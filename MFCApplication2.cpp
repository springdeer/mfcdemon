
// MFCApplication2.cpp : 定义应用程序的类行为。
//

#include "stdafx.h"
#include "MFCApplication2.h"
#include "MFCApplication2Dlg.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#endif


// CMFCApplication2App

BEGIN_MESSAGE_MAP(CMFCApplication2App, CWinApp)
	ON_COMMAND(ID_HELP, &CWinApp::OnHelp)
END_MESSAGE_MAP()


// CMFCApplication2App 构造

CMFCApplication2App::CMFCApplication2App()	
{
	// 支持重新启动管理器
	m_dwRestartManagerSupportFlags = AFX_RESTART_MANAGER_SUPPORT_RESTART;

	// TODO:  在此处添加构造代码，
	// 将所有重要的初始化放置在 InitInstance 中	

	m_nRunMode = _RUN_UNWIRE;

	m_bComConnected = FALSE;
}


// 唯一的一个 CMFCApplication2App 对象

CMFCApplication2App theApp;


// CMFCApplication2App 初始化
void CMFCApplication2App::InitConfig()
{
	TCHAR path[MAX_PATH];

	GetModuleFileName(AfxGetInstanceHandle(), path, sizeof(path));

	TCHAR* pEnd = _tcsrchr(path, _T('\\'));
	*(++pEnd) = '\0';

	_tcscat_s(path, sizeof(path), "config.ini");

	m_ini.SetFile(path);

	m_ini.ReadInt(_T("runtime"), _T("apptotaltime"), m_uTotalRuntime, 0);
}

BOOL CMFCApplication2App::InitInstance()
{
	// 如果一个运行在 Windows XP 上的应用程序清单指定要
	// 使用 ComCtl32.dll 版本 6 或更高版本来启用可视化方式，
	//则需要 InitCommonControlsEx()。  否则，将无法创建窗口。
	INITCOMMONCONTROLSEX InitCtrls;
	InitCtrls.dwSize = sizeof(InitCtrls);
	// 将它设置为包括所有要在应用程序中使用的
	// 公共控件类。
	InitCtrls.dwICC = ICC_WIN95_CLASSES;
	InitCommonControlsEx(&InitCtrls);

	CWinApp::InitInstance();

	InitConfig();

	AfxEnableControlContainer();

	// 创建 shell 管理器，以防对话框包含
	// 任何 shell 树视图控件或 shell 列表视图控件。
	//CShellManager *pShellManager = new CShellManager;

	// 激活“Windows Native”视觉管理器，以便在 MFC 控件中启用主题
	CMFCVisualManager::SetDefaultManager(RUNTIME_CLASS(CMFCVisualManagerWindows));

	// 标准初始化
	// 如果未使用这些功能并希望减小
	// 最终可执行文件的大小，则应移除下列
	// 不需要的特定初始化例程
	// 更改用于存储设置的注册表项
	// TODO:  应适当修改该字符串，
	// 例如修改为公司或组织名
	SetRegistryKey(_T("应用程序向导生成的本地应用程序"));	
	
	m_uTotalRuntime++;

	m_dataLog.Init();

	CMFCApplication2Dlg dlg;
	m_pMainWnd = &dlg;
	INT_PTR nResponse = dlg.DoModal();
	if (nResponse == IDOK)
	{
		// TODO:  在此放置处理何时用
		//  “确定”来关闭对话框的代码
	}
	else if (nResponse == IDCANCEL)
	{
		// TODO:  在此放置处理何时用
		//  “取消”来关闭对话框的代码
	}
	else if (nResponse == -1)
	{
		TRACE(traceAppMsg, 0, "警告: 对话框创建失败，应用程序将意外终止。\n");
		TRACE(traceAppMsg, 0, "警告: 如果您在对话框上使用 MFC 控件，则无法 #define _AFX_NO_MFC_CONTROLS_IN_DIALOGS。\n");
	}

	// 删除上面创建的 shell 管理器。
	//if (pShellManager != NULL)
	//{
	//	delete pShellManager;
	//}

	// 由于对话框已关闭，所以将返回 FALSE 以便退出应用程序，
	//  而不是启动应用程序的消息泵。
	return FALSE;
}

int CMFCApplication2App::ExitInstance()
{
	// TODO:  在此添加专用代码和/或调用基类

	m_ini.WriteInt(_T("runtime"), _T("apptotaltime"), m_uTotalRuntime);

	return CWinAppEx::ExitInstance();
}

void CMFCApplication2App::IncTotalRuntime(int secs)
{
	m_uTotalRuntime += secs;
}

CDataLog * CMFCApplication2App::GetLog()
{
	return &m_dataLog;
}

void CMFCApplication2App::SetRunMode(int runmode)
{
	m_nRunMode = runmode;
}

int CMFCApplication2App::GetRunMode()
{
	return m_nRunMode;
}

CTransmiter* CMFCApplication2App::GetTransmiter()
{
	return &m_transmitter;
}

void  CMFCApplication2App::SetCommConnected(BOOL bConnected)
{
	m_bComConnected = bConnected;
}

CCommandWnds* CMFCApplication2App::GetCommandWnds()
{
	return &m_wndCommands;
}